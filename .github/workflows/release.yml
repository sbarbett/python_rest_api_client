name: Release_Workflow
on: 
  push:
    branches:
      - master
jobs:
  Code_Analysis_Job:
    runs-on: ubuntu-latest
    environment: test
    steps:
      - 
        name: Check out repository code
        uses: actions/checkout@v4
      - 
        name: Setup Python environment
        uses: actions/setup-python@v5
      -
        name: Install Dependencies
        run: pip install requests
      - 
        name: Running acceptace test
        run: python test.py
        env:
          ULTRADNS_UNIT_TEST_USERNAME: ${{ secrets.ULTRADNS_UNIT_TEST_USERNAME }}
          ULTRADNS_UNIT_TEST_PASSWORD: ${{ secrets.ULTRADNS_UNIT_TEST_PASSWORD }}
          ULTRADNS_UNIT_TEST_HOST_URL: ${{ secrets.ULTRADNS_UNIT_TEST_HOST_URL }}
  Release_Job:
    runs-on: ubuntu-latest
    needs: Code_Analysis_Job
    environment: prod
    steps:
      - 
        name: Check out repository code
        uses: actions/checkout@v3
      - 
        name: Setup Python environment
        uses: actions/setup-python@v4
      - 
        name: Create Release Info
        run: |
          SDK_VERSION=$(cat .plugin-version)
          CURRENT_TIME=$(date +'%Y%m%d%H%M%S')
          COMMIT_ID=$(git rev-parse --short "$GITHUB_SHA")
          OLD_RELEASE_VERSION=$(git ls-remote --tags | cut -d/ -f3- | cut -d- -f1 | tail -1)
          if [ "$OLD_RELEASE_VERSION" = "$SDK_VERSION" ]; then echo "Release version not incremented"; exit 1; fi
          echo "RELEASE_VERSION=${SDK_VERSION}-${CURRENT_TIME}-${COMMIT_ID}" >> $GITHUB_ENV
      -
        name: Installing Dependencies
        run: |
          pip install requests
          pip install hatch
      - 
        name: Versioning the build
        run: hatch version ${{ env.RELEASE_VERSION }}
      - 
        name: Creating python Package
        run: hatch build
      - 
        name: Publishing python Package
        uses: pypa/gh-action-pypi-publish@v1.10.1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
